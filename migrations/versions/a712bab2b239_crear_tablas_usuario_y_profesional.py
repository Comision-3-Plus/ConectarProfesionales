"""Crear tablas Usuario y Profesional

Revision ID: a712bab2b239
Revises: 
Create Date: 2025-10-18 00:19:12.310066

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = 'a712bab2b239'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Asegurar que la extensión PostGIS esté habilitada antes de crear columnas Geography/Geometry
    op.execute("CREATE EXTENSION IF NOT EXISTS postgis;")
    op.create_table('usuarios',
    sa.Column('email', sa.String(length=255), nullable=False, comment='Email único del usuario (usado para login)'),
    sa.Column('password_hash', sa.String(length=255), nullable=False, comment='Hash bcrypt de la contraseña'),
    sa.Column('nombre', sa.String(length=100), nullable=False, comment='Nombre del usuario'),
    sa.Column('apellido', sa.String(length=100), nullable=False, comment='Apellido del usuario'),
    sa.Column('rol', sa.Enum('CLIENTE', 'PROFESIONAL', 'ADMIN', name='user_role_enum'), nullable=False, comment='Rol del usuario en el sistema'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Indica si el usuario está activo'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Identificador único universal'),
    sa.Column('fecha_creacion', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de creación del registro'),
    sa.Column('fecha_actualizacion', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de última actualización del registro'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_usuarios_email'), 'usuarios', ['email'], unique=True)
    op.create_index(op.f('ix_usuarios_is_active'), 'usuarios', ['is_active'], unique=False)
    op.create_index(op.f('ix_usuarios_rol'), 'usuarios', ['rol'], unique=False)
    op.create_table('profesionales',
    sa.Column('usuario_id', sa.UUID(), nullable=False, comment='Referencia única al usuario asociado'),
    sa.Column('estado_verificacion', sa.Enum('PENDIENTE', 'EN_REVISION', 'APROBADO', 'RECHAZADO', name='verification_status_enum'), nullable=False, comment='Estado del proceso de verificación de identidad'),
    sa.Column('base_location', geoalchemy2.types.Geography(geometry_type='POINT', srid=4326, from_text='ST_GeogFromText', name='geography'), nullable=True, comment='Ubicación base del profesional (punto geográfico en WGS84)'),
    sa.Column('radio_cobertura_km', sa.Integer(), nullable=False, comment='Radio de cobertura en kilómetros desde la ubicación base'),
    sa.Column('nivel', sa.Enum('BRONCE', 'PLATA', 'ORO', 'DIAMANTE', name='professional_level_enum'), nullable=False, comment='Nivel de gamificación del profesional'),
    sa.Column('tasa_comision_actual', sa.Numeric(precision=5, scale=2), nullable=False, comment='Tasa de comisión actual (0.00 a 1.00, donde 0.20 = 20%)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Identificador único universal'),
    sa.Column('fecha_creacion', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de creación del registro'),
    sa.Column('fecha_actualizacion', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de última actualización del registro'),
    sa.ForeignKeyConstraint(['usuario_id'], ['usuarios.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_profesional_estado_nivel', 'profesionales', ['estado_verificacion', 'nivel'], unique=False)
    op.create_index('idx_profesional_location_gist', 'profesionales', ['base_location'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_profesionales_estado_verificacion'), 'profesionales', ['estado_verificacion'], unique=False)
    op.create_index(op.f('ix_profesionales_nivel'), 'profesionales', ['nivel'], unique=False)
    op.create_index(op.f('ix_profesionales_usuario_id'), 'profesionales', ['usuario_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_profesionales_usuario_id'), table_name='profesionales')
    op.drop_index(op.f('ix_profesionales_nivel'), table_name='profesionales')
    op.drop_index(op.f('ix_profesionales_estado_verificacion'), table_name='profesionales')
    op.drop_index('idx_profesional_location_gist', table_name='profesionales', postgresql_using='gist')
    op.drop_index('idx_profesional_estado_nivel', table_name='profesionales')
    op.drop_table('profesionales')
    op.drop_index(op.f('ix_usuarios_rol'), table_name='usuarios')
    op.drop_index(op.f('ix_usuarios_is_active'), table_name='usuarios')
    op.drop_index(op.f('ix_usuarios_email'), table_name='usuarios')
    op.drop_table('usuarios')
    # ### end Alembic commands ###
